header=TRUE, row.names=1, check.names=FALSE)
View(FFA_vs_NPD1_canonical_comparison_heatmap)
pheatmap(FFA_vs_NPD1_canonical_comparison_heatmap, scale="row", main="Canonical Pathway Enrichment",
cellheight=20, cellwidth = 30, display_numbers=TRUE, cluster_cols = FALSE)
pheatmap(t(FFA_vs_NPD1_canonical_comparison_heatmap, scale="row", main="Canonical Pathway Enrichment",
cellheight=20, cellwidth = 30, display_numbers=TRUE, cluster_cols = FALSE))
FFA_vs_NPD1_canonical_comparison_heatmap <- read.csv("OneDrive - LSUHSC/Study 44 Gene Expression FFA/IPA Analysis Files for figures/FFA vs NPD1 canonical comparison heatmap transposed.csv",
header=TRUE, row.names=1, check.names=FALSE)
View(FFA_vs_NPD1_canonical_comparison_heatmap)
pheatmap(FFA_vs_NPD1_canonical_comparison_heatmap, scale="column", main="Canonical Pathway Enrichment",
cellheight=20, cellwidth = 30, display_numbers=TRUE, cluster_cols = FALSE, cluster_rows = FALSE)
pheatmap(FFA_vs_NPD1_canonical_comparison_heatmap, scale="row", main="Canonical Pathway Enrichment",
cellheight=20, cellwidth = 30, display_numbers=TRUE, cluster_cols = FALSE, cluster_rows = FALSE)
FFA_vs_NPD1_canonical_comparison_heatmap <- read.csv("OneDrive - LSUHSC/Study 44 Gene Expression FFA/IPA Analysis Files for figures/FFA vs NPD1 canonical comparison heatmap.csv",
header=TRUE, row.names=1, check.names=FALSE)
pheatmap(FFA_vs_NPD1_canonical_comparison_heatmap, scale="row", main="Canonical Pathway Enrichment",
cellheight=20, cellwidth = 30, display_numbers=TRUE, cluster_cols = FALSE, cluster_rows = FALSE)
pheatmap(FFA_vs_NPD1_canonical_comparison_heatmap, scale="row", main="Canonical Pathway Enrichment",
display_numbers=TRUE, cluster_cols = FALSE, cluster_rows = FALSE)
pheatmap(FFA_vs_NPD1_canonical_comparison_heatmap, scale="row", main="Canonical Pathway Enrichment",
display_numbers=TRUE, number_color = "black", cluster_cols = FALSE, cluster_rows = FALSE)
pheatmap(FFA_vs_NPD1_canonical_comparison_heatmap, scale="row", main="Canonical Pathway Enrichment",
display_numbers=TRUE, number_color = "black", fontsize_number = "8", cluster_cols = FALSE, cluster_rows = FALSE)
pheatmap(FFA_vs_NPD1_canonical_comparison_heatmap, scale="row", main="Canonical Pathway Enrichment",
display_numbers=TRUE, number_color = "black", fontsize_number = "10", cluster_cols = FALSE, cluster_rows = FALSE)
pheatmap(FFA_vs_NPD1_canonical_comparison_heatmap, scale="row", main="Canonical Pathway Enrichment",
display_numbers=TRUE, number_color = "black", fontsize_number = "10", labels_row= Make_bold_names, cluster_cols = FALSE, cluster_rows = FALSE)
pheatmap(FFA_vs_NPD1_canonical_comparison_heatmap, scale="row", main="Canonical Pathway Enrichment",
display_numbers=TRUE, number_color = "black", fontsize_number = "10", font_face="bold", labels_row= Make_bold_names, cluster_cols = FALSE, cluster_rows = FALSE)
pheatmap(FFA_vs_NPD1_canonical_comparison_heatmap, scale="row", main="Canonical Pathway Enrichment",
display_numbers=TRUE, number_color = "black", fontsize_number = "10", font_face="bold", cluster_cols = FALSE, cluster_rows = FALSE)
pheatmap(FFA_vs_NPD1_canonical_comparison_heatmap, scale="row", main="Canonical Pathway Enrichment",
display_numbers=TRUE, number_color = "black", fontsize_number = "10", cluster_cols = FALSE, cluster_rows = FALSE)
install.packages("Signac")
library(dplyr)
library(Seurat)
library(patchwork)
library(dplyr)
library(Seurat)
library(patchwork)
pag.10x.data <- Read10X(data.dir = "/Volumes/External MR/Files for 10x PAG project/raw_feature_bc_matrix")
install.packages("Seurat")
install.packages("patchwork")
library(dplyr)
library(Seurat)
library(patchwork)
library(Signac)
library(Seurat)
library(EnsDb.Mmusculus.v79)
library(BSgenome.Mmusculus.UCSC.mm10)
library(reticulate)
set.seed(1234)
counts.appki <- Read10X_h5("/Volumes/External MR/Aggr_WT_APPKI_mouse_brains_aggretate/outs/filtered_feature_bc_matrix.h5")
fragpath <- "/Volumes/External MR/Aggr_WT_APPKI_mouse_brains_aggretate/Files for R seurat and Signac/atac_fragments.tsv.gz"
annotation <- GetGRangesFromEnsDb(ensdb = EnsDb.Mmusculus.v79)
seqlevelsStyle(annotation) <- 'UCSC'
remove.packages("Signac")
install.packages("Signac")
install.packages("Signac")
install.packages("Signac")
install.packages("Signac")
BiocManager::install("GenomeInfoDb", force=TRUE)
setRepositories(ind=1:3) # needed to automatically install Bioconductor dependencies
install.packages("Signac")
install.packages("Signac")
library(Signac)
library(Seurat)
library(EnsDb.Mmusculus.v79)
library(BSgenome.Mmusculus.UCSC.mm10)
set.seed(1234)
counts.appki <- Read10X_h5("/Volumes/External MR/Aggr_WT_APPKI_mouse_brains_aggretate/outs/filtered_feature_bc_matrix.h5")
fragpath <- "/Volumes/External MR/Aggr_WT_APPKI_mouse_brains_aggretate/Files for R seurat and Signac/atac_fragments.tsv.gz"
annotation <- GetGRangesFromEnsDb(ensdb = EnsDb.Mmusculus.v79)
View(annotation)
seqlevelsStyle(annotation) <- 'UCSC'
BiocManager::install("GenomeInfoDb", force=TRUE)
print("sup")
library(dplyr)
library(Seurat)
library(patchwork)
library(ggplot2)
library(scCustomize)
library(dittoSeq)
# Load the dataset
app.10x.data <- Read10X(data.dir = "/Volumes/External MR/Aggr_WT_APPKI_mouse_brains_aggretate/Files for R seurat and Signac/raw_feature_bc_matrix")
APP10x <- CreateSeuratObject(counts = app.10x.data$`Gene Expression`, project = "APP10x", min.cells = 3, names.delim = "-", names.field = 2, min.features=200)
color_palette <- c("#ff6b6b", "#ffd166", "#06d6a0", "#1b9aaa", "#5f0f40", "#26547c", "#ef476f", "#ffc43d", "#06a77d", "#17202a",
"#8a2be2", "#7fb3d5", "#52be80", "#e74c3c", "#f1c40f", "#f39c12", "#8e44ad", "#3498db", "#16a085", "#1abc9c",
"#f1948a", "#85c1e9", "#abebc6", "#f7dc6f", "#dc7633", "#6c3483", "#2874a6", "#148f77")
col_Vln <-c("#1b9aaa","#e74c3c")
data_hippocampus <- subset(APP10x, idents = c("3", "4"))
data_cortex <- subset(APP10x, idents = c("1", "2"))
data_cortex@meta.data$orig.ident <- droplevels(data_cortex@meta.data$orig.ident)
data_hippocampus@meta.data$orig.ident <- droplevels(data_hippocampus@meta.data$orig.ident)
data_cortex[["percent.mt"]] <- PercentageFeatureSet(data_cortex, pattern = "^mt-")
VlnPlot(data_cortex, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, idents = c("1", "2"),
pt.size = 0, cols =col_Vln)
plot1 <- FeatureScatter(data_cortex, feature1 = "nCount_RNA", feature2 = "percent.mt", cols = hcl.colors(4, "SunsetDark"))
plot2 <- FeatureScatter(data_cortex, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", cols = hcl.colors(4, "SunsetDark"))
plot1 + plot2
data_cortex <- subset(data_cortex, subset = nFeature_RNA > 200 & nFeature_RNA < 6000 & percent.mt < 10)
data_cortex_list <- SplitObject(data_cortex, split.by = "orig.ident")
data_cortex_list <- lapply(X = data_cortex_list, FUN = SCTransform)
features <- SelectIntegrationFeatures(object.list = data_cortex_list, nfeatures = 3000)
data_cortex_list <- PrepSCTIntegration(object.list = data_cortex_list, anchor.features = features)
appcortex_anchors <- FindIntegrationAnchors(object.list = data_cortex_list, normalization.method = "SCT",
anchor.features = features)
appcortex_combined <- IntegrateData(anchorset = appcortex_anchors, normalization.method = "SCT")
# From Jeffs code
appcortex_combined <- RunPCA(appcortex_combined, verbose = FALSE)
appcortex_combined <- RunUMAP(appcortex_combined, reduction = "pca", dims = 1:30)
appcortex_combined <- FindNeighbors(appcortex_combined, reduction = "pca", dims = 1:30)
appcortex_combined <- FindClusters(appcortex_combined, resolution = 0.5)
p1 <- DimPlot_scCustom(seurat_object = appcortex_combined, , reduction="umap", group.by = "orig.ident",
colors_use = DiscretePalette_scCustomize(num_colors = 2, palette = "varibow"))
p2 <- DimPlot_scCustom(appcortex_combined, reduction = "umap", label = TRUE, repel = TRUE,
colors_use = color_palette)
p1+p2
lapply(c("dplyr","Seurat","HGNChelper","openxlsx"), library, character.only = T)
col_Vln <-c("#5f0f40","#26547c")
color_palette <- c("#ff6b6b", "#ffd166", "#06d6a0", "#1b9aaa", "#5f0f40", "#26547c", "#ef476f", "#ffc43d", "#06a77d", "#17202a",
"#8a2be2", "#7fb3d5", "#52be80", "#e74c3c", "#f1c40f", "#f39c12", "#8e44ad", "#3498db", "#16a085", "#1abc9c",
"#f1948a", "#85c1e9", "#abebc6", "#f7dc6f", "#dc7633", "#6c3483", "#2874a6", "#148f77")
plot1 <- FeatureScatter(data_cortex, feature1 = "nCount_RNA", feature2 = "percent.mt", cols = col_Vln)
plot2 <- FeatureScatter(data_cortex, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", cols = col_Vln)
plot1 + plot2
VlnPlot(data_cortex, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, idents = c("1", "2"),
pt.size = 0, cols =col_Vln)
DefaultAssay(appcortex_combined) <- "RNA"
APP10x <- CreateSeuratObject(counts = app.10x.data$`Gene Expression`, project = "APP10x", min.cells = 3, names.delim = "-", names.field = 2, min.features=200)
data_hippocampus <- subset(APP10x, idents = c("3", "4"))
data_cortex <- subset(APP10x, idents = c("1", "2"))
data_cortex@meta.data$orig.ident <- droplevels(data_cortex@meta.data$orig.ident)
data_hippocampus@meta.data$orig.ident <- droplevels(data_hippocampus@meta.data$orig.ident)
data_cortex[["percent.mt"]] <- PercentageFeatureSet(data_cortex, pattern = "^mt-")
VlnPlot(data_cortex, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, idents = c("1", "2"),
pt.size = 0, cols =col_Vln)
plot1 <- FeatureScatter(data_cortex, feature1 = "nCount_RNA", feature2 = "percent.mt", cols = col_Vln)
plot2 <- FeatureScatter(data_cortex, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", cols = col_Vln)
plot1 + plot2
data_cortex <- subset(data_cortex, subset = nFeature_RNA > 200 & nFeature_RNA < 6000 & percent.mt < 10)
data_cortex_list <- SplitObject(data_cortex, split.by = "orig.ident")
data_cortex_list <- lapply(X = data_cortex_list, FUN = SCTransform)
features <- SelectIntegrationFeatures(object.list = data_cortex_list, nfeatures = 3000)
data_cortex_list <- PrepSCTIntegration(object.list = data_cortex_list, anchor.features = features)
appcortex_anchors <- FindIntegrationAnchors(object.list = data_cortex_list, normalization.method = "SCT",
anchor.features = features)
appcortex_combined <- IntegrateData(anchorset = appcortex_anchors, normalization.method = "SCT")
DotPlot(appcortex_combined, features = c('Reln', 'Apoe','App','Mapt'),
dot.scale = 15, group.by = "orig.ident") + RotatedAxis() + ggtitle("AD Related Genes") +coord_flip()
DefaultAssay(appcortex_combined) <- "RNA"
DotPlot(appcortex_combined, features = c('Reln', 'Apoe','App','Mapt'),
dot.scale = 15, group.by = "orig.ident") + RotatedAxis() + ggtitle("AD Related Genes") +coord_flip()
appcortex_combined$CellType <- "Cell Type"  # initialize a new column
seurat_object$CellType[which(seurat_object$seurat_clusters == 0)] <- "Gabaergic Neuron"
seurat_object$CellType[which(seurat_object$seurat_clusters == 1)] <- "Astrocytes"
appcortex_combined$CellType[which(seurat_object$seurat_clusters == 0)] <- "Gabaergic Neuron"
appcortex_combined$CellType[which(seurat_object$seurat_clusters == 1)] <- "Astrocytes"
View(appcortex_combined)
appcortex_combined$CellType[which(appcortex_combined$seurat_clusters == 0)] <- "Gabaergic Neuron"
appcortex_combined$CellType[which(appcortex_combined$seurat_clusters == 1)] <- "Astrocytes"
appcortex_combined$CellType[which(appcortex_combined$seurat_clusters == 2)] <- "Oligodendrocytes"
View(appcortex_combined)
appcortex_combined@meta.data$CellType
setwd("~/Documents/PAGAnalgesicATAC")
library(ArchR)
library(parallel)
addArchRThreads(threads = 18)
set.seed(1)
projPAG <- loadArchRProject(path = "./PAG_ATAC_Directory4", force = FALSE, showLogo = TRUE)
projPAG <- addIterativeLSI(
ArchRProj = projPAG,
useMatrix = "TileMatrix",
name = "IterativeLSI",
iterations = 2,
clusterParams = list( #See Seurat::FindClusters
resolution = c(0.2),
sampleCells = 10000,
n.start = 10
),
varFeatures = 25000,
dimsToUse = 1:30,
force=TRUE
)
# Now we can begin clustering which uses the Seurat FindCLusters function
projPAG <- addClusters(
input = projPAG,
reducedDims = "IterativeLSI",
method = "Seurat",
name = "Clusters",
resolution = 0.8,
force= TRUE
)
markersGS <- getMarkerFeatures(
ArchRProj = projPAG,
useMatrix = "GeneScoreMatrix",
groupBy = "Clusters",
bias = c("TSSEnrichment", "log10(nFrags)"),
testMethod = "wilcoxon"
)
# Get markers for each of the clusters
markerList <- getMarkers(markersGS, cutOff = "FDR <= 0.01 & Log2FC >= 1.25")
ranked_df <- markerList$C7[order(-markerList$C7$Log2FC), ]
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:9, ]
# Step 3: Get the names (GeneName) of the top 9 rows
top_9_gene_names <- top_9_rows$name
top_9_gene_names
ranked_df <- markerList$C8[order(-markerList$C8$Log2FC), ]
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:9, ]
ranked_df <- markerList$C8[order(-markerList$C8$Log2FC), ]
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:9, ]
View(ranked_df)
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:8, ]
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:5, ]
# Step 3: Get the names (GeneName) of the top 9 rows
top_9_gene_names <- top_9_rows$name
top_9_gene_names
# Step 1: Rank the data frame by the column "Log2FC" in descending order
ranked_df <- markerList$C9[order(-markerList$C9$Log2FC), ]
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:9, ]
# Step 3: Get the names (GeneName) of the top 9 rows
top_9_gene_names <- top_9_rows$name
top_9_gene_names
# Step 1: Rank the data frame by the column "Log2FC" in descending order
ranked_df <- markerList$C10[order(-markerList$C10$Log2FC), ]
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:9, ]
# Step 3: Get the names (GeneName) of the top 9 rows
top_9_gene_names <- top_9_rows$name
top_9_gene_names
# Step 1: Rank the data frame by the column "Log2FC" in descending order
ranked_df <- markerList$C11[order(-markerList$C11$Log2FC), ]
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:9, ]
# Step 3: Get the names (GeneName) of the top 9 rows
top_9_gene_names <- top_9_rows$name
top_9_gene_names
# Step 1: Rank the data frame by the column "Log2FC" in descending order
ranked_df <- markerList$C12[order(-markerList$C12$Log2FC), ]
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:9, ]
# Step 3: Get the names (GeneName) of the top 9 rows
top_9_gene_names <- top_9_rows$name
top_9_gene_names
# Step 1: Rank the data frame by the column "Log2FC" in descending order
ranked_df <- markerList$C13[order(-markerList$C13$Log2FC), ]
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:9, ]
# Step 3: Get the names (GeneName) of the top 9 rows
top_9_gene_names <- top_9_rows$name
top_9_gene_names
# Step 1: Rank the data frame by the column "Log2FC" in descending order
ranked_df <- markerList$C13[order(-markerList$C13$Log2FC), ]
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:9, ]
# Step 3: Get the names (GeneName) of the top 9 rows
top_9_gene_names <- top_9_rows$name
top_9_gene_names
# Step 1: Rank the data frame by the column "Log2FC" in descending order
ranked_df <- markerList$C13[order(-markerList$C13$Log2FC), ]
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:9, ]
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:6, ]
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:4, ]
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:2, ]
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:1, ]
# Step 3: Get the names (GeneName) of the top 9 rows
top_9_gene_names <- top_9_rows$name
top_9_gene_names
# Step 1: Rank the data frame by the column "Log2FC" in descending order
ranked_df <- markerList$C14[order(-markerList$C14$Log2FC), ]
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:9, ]
# Step 3: Get the names (GeneName) of the top 9 rows
top_9_gene_names <- top_9_rows$name
top_9_gene_names
# Step 1: Rank the data frame by the column "Log2FC" in descending order
ranked_df <- markerList$C15[order(-markerList$C15$Log2FC), ]
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:9, ]
# Step 3: Get the names (GeneName) of the top 9 rows
top_9_gene_names <- top_9_rows$name
top_9_gene_names
# Step 1: Rank the data frame by the column "Log2FC" in descending order
ranked_df <- markerList$C16[order(-markerList$C16$Log2FC), ]
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:9, ]
# Step 3: Get the names (GeneName) of the top 9 rows
top_9_gene_names <- top_9_rows$name
top_9_gene_names
markersGS <- getMarkerFeatures(
ArchRProj = projPAG,
useMatrix = "GeneScoreMatrix",
groupBy = "Sample",
bias = c("TSSEnrichment", "log10(nFrags)"),
testMethod = "wilcoxon"
)
View(markersGS)
heatmapGS <- markerHeatmap(
seMarker = markersGS,
cutOff = "FDR <= 0.01 & Log2FC >= 1.25",
labelMarkers = NULL, #can set to marker genes for labelling once defined
transpose = TRUE
)
ComplexHeatmap::draw(heatmapGS, heatmap_legend_side = "bot", annotation_legend_side = "bot")
sub <- c("Sox11", "Atf3", "Gal1r", "Gabbr2", "Grm7", "Gpr158", "Chrm2", "Chrm3", "Cnr1", "Oprl1", "Oprm1", "Mrgpre")
subsetSE <- markersGS[which(rowData(markersGS)$name %in% c("EVI5","RPF1","AK5")),]
heatmapGS <- markerHeatmap(
seMarker = subsetSE,
cutOff = "FDR <= 0.01 & Log2FC >= 1.25",
labelMarkers = NULL, #can set to marker genes for labelling once defined
transpose = TRUE,
ArchRPalettes
)
ComplexHeatmap::draw(heatmapGS, heatmap_legend_side = "bot", annotation_legend_side = "bot")
subsetSE <- markersGS[which(rowData(markersGS)$name %in% sub),]
heatmapGS <- markerHeatmap(
seMarker = subsetSE,
cutOff = "FDR <= 0.01 & Log2FC >= 1.25",
labelMarkers = NULL, #can set to marker genes for labelling once defined
transpose = TRUE,
ArchRPalettes
)
ComplexHeatmap::draw(heatmapGS, heatmap_legend_side = "bot", annotation_legend_side = "bot")
heatmapGS <- markerHeatmap(
seMarker = subsetSE,
labelMarkers = NULL, #can set to marker genes for labelling once defined
transpose = TRUE
)
ComplexHeatmap::draw(heatmapGS, heatmap_legend_side = "bot", annotation_legend_side = "bot")
markersGS <- getMarkerFeatures(
ArchRProj = projPAG,
useMatrix = "GeneScoreMatrix",
groupBy = "Clusters",
bias = c("TSSEnrichment", "log10(nFrags)"),
testMethod = "wilcoxon"
)
sub <- c("Sox11", "Atf3", "Gal1r", "Gabbr2", "Grm7", "Gpr158", "Chrm2", "Chrm3", "Cnr1", "Oprl1", "Oprm1", "Mrgpre")
subsetSE <- markersGS[which(rowData(markersGS)$name %in% sub),]
heatmapGS <- plotMarkerHeatmap(
seMarker = subsetSE,
labelMarkers = NULL, #can set to marker genes for labelling once defined
transpose = TRUE
)
ComplexHeatmap::draw(heatmapGS, heatmap_legend_side = "bot", annotation_legend_side = "bot")
ArchRPalettes
heatmapGS <- plotMarkerHeatmap(
seMarker = subsetSE,
labelMarkers = NULL, #can set to marker genes for labelling once defined
transpose = TRUE,
pal = ArchRPalettes$coolwarm
)
ComplexHeatmap::draw(heatmapGS, heatmap_legend_side = "bot", annotation_legend_side = "bot")
markersGS <- getMarkerFeatures(
ArchRProj = projPAG,
useMatrix = "GeneScoreMatrix",
groupBy = "Sample",
bias = c("TSSEnrichment", "log10(nFrags)"),
testMethod = "wilcoxon"
)
# Get markers for each of the clusters
markerList <- getMarkers(markersGS, cutOff = "FDR <= 0.01 & Log2FC >= 1.25")
markerList$C6$name
sub <- c("Sox11", "Atf3", "Gal1r", "Gabbr2", "Grm7", "Gpr158", "Chrm2", "Chrm3", "Cnr1", "Oprl1", "Oprm1", "Mrgpre")
subsetSE <- markersGS[which(rowData(markersGS)$name %in% sub),]
heatmapGS <- plotMarkerHeatmap(
seMarker = subsetSE,
labelMarkers = NULL, #can set to marker genes for labelling once defined
transpose = TRUE,
pal = ArchRPalettes$coolwarm
)
heatmapGS <- plotMarkerHeatmap(
seMarker = markersGS,
labelMarkers = NULL, #can set to marker genes for labelling once defined
transpose = TRUE,
pal = ArchRPalettes$coolwarm
)
ComplexHeatmap::draw(heatmapGS, heatmap_legend_side = "bot", annotation_legend_side = "bot")
heatmapGS <- plotMarkerHeatmap(
seMarker = markersGS,
labelMarkers = NULL, #can set to marker genes for labelling once defined
transpose = TRUE,
labelRows = sub,
pal = ArchRPalettes$coolwarm
)
heatmapGS <- plotMarkerHeatmap(
seMarker = markersGS,
labelMarkers = sub, #can set to marker genes for labelling once defined
transpose = TRUE,
pal = ArchRPalettes$coolwarm
)
ComplexHeatmap::draw(heatmapGS, heatmap_legend_side = "bot", annotation_legend_side = "bot")
View(projPAG)
markersGS <- getMarkerFeatures(
ArchRProj = projPAG,
useMatrix = "GeneScoreMatrix",
groupBy = "Sample",
bias = c("TSSEnrichment", "log10(nFrags)"),
testMethod = "wilcoxon"
)
# Get markers for each of the clusters
markerList <- getMarkers(markersGS)
sub <- c("Sox11", "Atf3", "Gal1r", "Gabbr2", "Grm7", "Gpr158", "Chrm2", "Chrm3", "Cnr1", "Oprl1", "Oprm1", "Mrgpre")
subsetSE <- markersGS[which(rowData(markersGS)$name %in% sub),]
heatmapGS <- plotMarkerHeatmap(
seMarker = subsetSE,
labelMarkers = sub, #can set to marker genes for labelling once defined
transpose = TRUE,
pal = ArchRPalettes$coolwarm
)
sampleSE <- getGroupSE(
ArchRProj = projPAG,
useMatrix = "GeneScoreMatrix",
groupBy = "Sample")
View(sampleSE)
heatmapGS <- plotMarkerHeatmap(
seMarker = sampleSE,
labelMarkers = sub, #can set to marker genes for labelling once defined
transpose = TRUE,
pal = ArchRPalettes$coolwarm
)
markersGS <- getMarkerFeatures(
ArchRProj = projPAG,
useMatrix = "GeneScoreMatrix",
groupBy = "Sample",
bias = c("TSSEnrichment", "log10(nFrags)"),
testMethod = "wilcoxon",
maxCells = 1000
)
# Get markers for each of the clusters
markerList <- getMarkers(markersGS, cutOff = "FDR <= 0.01 & Log2FC >= .5")
sub <- c("Sox11", "Atf3", "Gal1r", "Gabbr2", "Grm7", "Gpr158", "Chrm2", "Chrm3", "Cnr1", "Oprl1", "Oprm1", "Mrgpre")
subsetSE <- markersGS[which(rowData(markersGS)$name %in% sub),]
heatmapGS <- plotMarkerHeatmap(
seMarker = sampleSE,
labelMarkers = sub, #can set to marker genes for labelling once defined
transpose = TRUE,
pal = ArchRPalettes$coolwarm
)
heatmapGS <- plotMarkerHeatmap(
seMarker = subsetSE,
labelMarkers = sub, #can set to marker genes for labelling once defined
transpose = TRUE,
pal = ArchRPalettes$coolwarm
)
heatmapGS <- plotMarkerHeatmap(
seMarker = markersGS,
labelMarkers = sub, #can set to marker genes for labelling once defined
transpose = TRUE,
pal = ArchRPalettes$coolwarm
)
BiocManager::install("sechm")
library(sechm)
sechm(subsetSE, features=sub)
sechm(subsetSE, features=sub, assayName = "Log2FC")
sechm(subsetSE, features=sub, assayName = "Log2FC", from = 0.5)
View(sampleSE)
View(subsetSE)
sechm(subsetSE, features=sub, assayName = "Log2FC")
# plotting the embedding
p1 <- plotEmbedding(ArchRProj = projPAG2, colorBy = "cellColData", name = "Sample", embedding = "UMAP")
# plotting the embedding
p1 <- plotEmbedding(ArchRProj = projPAG, colorBy = "cellColData", name = "Sample", embedding = "UMAP")
p2 <- plotEmbedding(ArchRProj = projPAG, colorBy = "cellColData", name = "Clusters", embedding = "UMAP")
p2
# Step 1: Rank the data frame by the column "Log2FC" in descending order
ranked_df <- markerList$C1[order(markerList$C1$Log2FC), ]
markersGS <- getMarkerFeatures(
ArchRProj = projPAG,
useMatrix = "GeneScoreMatrix",
groupBy = "Clusters",
bias = c("TSSEnrichment", "log10(nFrags)"),
testMethod = "wilcoxon",
maxCells = 1000
)
# Get markers for each of the clusters
markerList <- getMarkers(markersGS, cutOff = "FDR <= 0.01 & Log2FC >= .5")
# Get markers for each of the clusters
markerList <- getMarkers(markersGS, cutOff = "FDR <= 0.01 & Log2FC >= .5")
# Step 1: Rank the data frame by the column "Log2FC" in descending order
ranked_df <- markerList$C1[order(markerList$C1$Log2FC), ]
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:9, ]
# Step 3: Get the names (GeneName) of the top 9 rows
top_9_gene_names <- top_9_rows$name
top_9_gene_names
# Step 1: Rank the data frame by the column "Log2FC" in descending order
ranked_df <- as.data.frame(markerList$C1[order(-markerList$C1$Log2FC), ])
# Step 2: Get the top 9 rows from the ranked data frame
top_9_rows <- ranked_df[1:9, ]
# Step 3: Get the names (GeneName) of the top 9 rows
top_9_gene_names <- top_9_rows$name
top_9_gene_names
View(ranked_df)
# Get markers for each of the clusters
markerList <- getMarkers(markersGS, cutOff = "FDR <= 0.01 & Log2FC >= 2")
# Step 1: Rank the data frame by the column "Log2FC" in descending order
ranked_df <- as.data.frame(markerList$C1[order(-markerList$C1$Log2FC), ])
View(ranked_df)
p2 <- plotEmbedding(ArchRProj = projPAG, colorBy = "cellColData", name = "Clusters", embedding = "UMAP")
p3 <- plotEmbedding(ArchRProj = projPAG, colorBy = "cellColData", name = "Clusters", embedding = "UMAP")
p3
